# -*- coding: utf-8 -*-
"""txtfile.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KAqvbUsYkF-ww0z6Wp0c8SdSWjtFvOQM
"""

from google.colab import files
uploaded = files.upload()

file_name = "wiki_us.txt"
uploaded[file_name].decode("utf-8")

path = input("Enter the file name: ")
with open(path) as f:
    text = f.read()
    
print(text)

import spacy
nlp=spacy.load("en_core_web_sm")

# text="Flamingos or flamingoes[a] /fl äz/ are a type of wading bird in the family Phoenicopteridae, which is the only extant family in the order Phoenicopteriformes. There are four flamingo species distributed throughout the Americas (including the Caribbean), and two species native to Afro-Eurasia. A group of flamingoes is called a flamboyance."
# print(text)

doc=nlp(text)
# doc

stopwords=[w for w in doc if w.is_stop==True]
# stopwords

text2=[w for w in doc if w.is_stop==False  and w.pos_ != "PUNCT"]
# text2

import nltk
from nltk import FreqDist
from nltk import word_tokenize

text3 = " ".join([token.lemma_ for token in text2])
print(text3)

keyword = str(text3).split()
keyword

frequency=FreqDist(keyword)
print(frequency.most_common())

import re
from collections import defaultdict
from tabulate import tabulate

# Define window size (number of words to look on either side of the target word)
window_size = 2

# Preprocess text and generate word frequency dictionary
words = re.findall('\w+', text3.lower())
word_freq = defaultdict(int)
for word in words:
    word_freq[word] += 1

# Generate co-occurrence matrix
co_matrix = defaultdict(lambda: defaultdict(int))
for i in range(len(words)):
    for j in range(max(0, i - window_size), min(len(words), i + window_size + 1)):
        if i != j:
            co_matrix[words[i]][words[j]] += 1

# Convert co-occurrence matrix to list of lists
table = []
header = [''] + list(co_matrix.keys())
for word1 in co_matrix:
    row = [word1]
    for word2 in co_matrix:
        row.append(str(co_matrix[word1][word2]))
    table.append(row)

# Print co-occurrence matrix in table format
print(tabulate(table, headers=header, tablefmt='grid'))

ratio = {}
for word in co_matrix:
    deg = sum(co_matrix[word].values())
    freq = word_freq[word]
    ratio[word] = deg/freq

# Print degree/frequency ratio for each word
for word in sorted(ratio, key=ratio.get, reverse=True):
    print(word,ratio[word])

keywords_to_extract = int(len(ratio)/3)
print(keywords_to_extract)

best_keywords = sorted(ratio, key=ratio.get, reverse=True)[:keywords_to_extract]
print(best_keywords)

for final in best_keywords:
    print(final)
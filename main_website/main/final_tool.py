# -*- coding: utf-8 -*-
"""final tool.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afzc2hpwBgBiR2pZ4HLYBY04apT2Dmv2
"""
import spacy
import nltk
from nltk import FreqDist
from nltk import word_tokenize
import re
from collections import defaultdict
from tabulate import tabulate

# text="The stage is set, world government is in place, targets established, and the agenda initiated.  No, this is not the beginning of a dystopian novel, this is 2021, and we are living in unprecedented times.  Our article, Coming Persecution of Christians in America is what Illuminating Faith believes is the article that must be shared by all Bible believing Christians as a warning for Satanâ€™s advancement on believers in the U.S and other Western countries. "


def extract_keywords(text):
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(text)
    stopwords = [w for w in doc if w.is_stop == True]
    text2 = [w for w in doc if w.is_stop == False and w.pos_ != "PUNCT"]
    text3 = " ".join([token.lemma_ for token in text2])
    print(text3)
    keyword = str(text3).split()

    frequency = FreqDist(keyword)
    print(frequency.most_common())

    window_size = 2

    words = re.findall('\w+', text3.lower())
    word_freq = defaultdict(int)
    for word in words:
        word_freq[word] += 1

    co_matrix = defaultdict(lambda: defaultdict(int))
    for i in range(len(words)):
        for j in range(max(0, i - window_size), min(len(words), i + window_size + 1)):
            if i != j:
                co_matrix[words[i]][words[j]] += 1

    table = []
    header = [''] + list(co_matrix.keys())
    for word1 in co_matrix:
        row = [word1]
        for word2 in co_matrix:
            row.append(str(co_matrix[word1][word2]))
        table.append(row)
    print(tabulate(table, headers=header, tablefmt='grid'))

    ratio = {}
    for word in co_matrix:
        deg = sum(co_matrix[word].values())
        freq = word_freq[word]
        ratio[word] = deg/freq

    ratio_values = []

    for word in sorted(ratio, key=ratio.get, reverse=True):
        ratio_values.append(ratio[word])

    print(ratio_values)

    # if (len(ratio_values) >= 20):
    #     ratio_values = ratio_values[:20]
    # else:
    #     ratio_values = ratio_values[:len(best_keywords)]

    keywords_to_extract = int(len(ratio))
    print(keywords_to_extract)

    best_keywords = sorted(ratio, key=ratio.get, reverse=True)[
        :keywords_to_extract]
    print(best_keywords)

    # if (len(best_keywords) >= 20):
    #     best_keywords = best_keywords[:20]
    # else:
    #     best_keywords = best_keywords[:len(best_keywords)]

    # final_ratio = sorted(ratio , key=ratio.get , reverse=True)
    print(ratio)
    # sorted_dict = sorted(ratio.items(),key=lambda kv: kv[1],reverse=True)
    sorted_dict = dict(
        sorted(ratio.items(), key=lambda kv: kv[1], reverse=True))
    print(sorted_dict)
    for final in best_keywords:
        print(final)

    return best_keywords, ratio_values, sorted_dict

